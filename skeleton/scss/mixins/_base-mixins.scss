@mixin genDeltas($type,$anumber) {
  @if $type == 'm' {
    margin:$anumber;
  }@elseif $type == 'p' {
    padding:$anumber;
  }
}

@mixin mobile {
  @media (min-width: #{$mobile}) and (max-width: #{$landscape - 1px}) {
    @content;
  }
}
@mixin landscape {
  @media (min-width: #{$landscape}) and (max-width: #{$phablet - 1px}) {
    @content;
  }
}
@mixin phablet {
  @media (min-width: #{$phablet}) and (max-width: #{$tablet - 1px}) {
    @content;
  }
}
@mixin tablet {
  @media (min-width: #{$tablet}) and (max-width: #{$desktop - 1px}) {
    @content;
  }
}
@mixin fw($anumber) {
  width:$anumber!important;
}
@mixin in($type) {
  $type:inherit!important;
}
@mixin clearfix($extend: true) {
  @if $extend == true {
    @extend %clearfix;
  } @else {
    &:after {
      content: '';
      display: table;
      clear: both;
    }
  }
}

%clearfix {
  @include clearfix($extend: false);
}

@mixin boxshadow($h,$v,$b,$s,$c,$inset: false) {
  @if $inset == false {
    box-shadow: $h $v $b $s $c;
    -webkit-box-shadow: $h $v $b $s $c;
    -moz-box-shadow: $h $v $b $s $c;
  } @else {
    box-shadow: $h $v $b $s $c inset;
    -webkit-box-shadow: $h $v $b $s $c inset;
    -moz-box-shadow: $h $v $b $s $c inset;
  }
}

@mixin rem($property, $values) {
  /**
  1 - The mixin relies on a baseline of 10px
  2 - The mixin relies on a function to parse the integer from a value with a unit
  3 - We define a list of values for both units
  4 - We iterate through each value in the given parameter $values
  5 - If the value is either auto or 0, we append it to the list as-is
  6 - If the value has a unit, we split it to get both the unit and the raw value
  7 - We append according values to the lists depending on the unit of the given value
  8 - If the two lists are the same, we ouput only one (like margin-top: 0)
  9 - We output the result
  **/
  $px : (); /* 3 */
  $rem: (); /* 3 */

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);    /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" {  /* 7 */
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" { /* 7 */
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {     /* 8 */
    #{$property}: $px;  /* 9 */
  } @else {
    #{$property}: $px;  /* 9 */
    #{$property}: $rem; /* 9 */
  }
}